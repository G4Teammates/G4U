@using Client.Models.ProductDTO

@{
    Layout = "_LayoutAdmin";
}

@model ProductViewModel
<style>
    /* Căn giữa nội dung của các ô trong bảng */
    .table td, .table th {
        text-align: center; /* Căn giữa cho văn bản */
        vertical-align: middle; /* Căn giữa theo chiều dọc */
    }

        /* Căn giữa hình ảnh trong các ô */
        .table td img {
            display: block; /* Đảm bảo hình ảnh chiếm toàn bộ không gian */
            text-align:center;
            justify-content:center;
        }

        /* Căn giữa nội dung của các phần tử ul, li trong bảng */
        .table td ul {
            list-style-type: none; /* Loại bỏ dấu chấm đầu dòng */
            padding: 0;
            text-align: center; /* Căn giữa văn bản trong danh sách */
        }

        .table td li {
            text-align: center; /* Căn giữa văn bản trong mỗi mục danh sách */
        }

        /* Căn giữa cho các icon trong các liên kết */
        .table td a i {
            display: inline-block; /* Đảm bảo icon được căn giữa */
            text-align: center;
            margin-left: auto;
            margin-right: auto;
        }

    /* Cải tiến border cho thead và tbody */
    .table thead {
        background-color: #f8f9fa; /* Màu nền sáng cho thead */
        border-radius: 10px 10px 0 0; /* Làm tròn góc trên của thead */
        box-shadow: 0px 2px 5px rgba(0, 0, 0, 0.1); /* Thêm bóng nhẹ cho thead */
    }

    .table tbody {
        border-radius: 0 0 10px 10px; /* Làm tròn góc dưới của tbody */
        box-shadow: 0px -2px 5px rgba(0, 0, 0, 0.1); /* Thêm bóng nhẹ cho tbody */
    }

        /* Chỉnh sửa khi hover vào dòng */
        .table tbody tr:hover {
            background-color: #00A97F; /* Nền màu #00A97F khi hover vào dòng */
            color: white !important; /* Chữ trắng khi hover vào dòng */
            cursor: pointer; /* Thêm hiệu ứng con trỏ khi hover */
            border-top: 2px solid #00A97F; /* Viền trên của tr khi hover */
            border-bottom: 2px solid #00A97F; /* Viền dưới của tr khi hover */
        }

        /* Giữ nguyên màu nền và chữ trong các ô mặc định */
        .table tbody tr td {
            background-color: transparent; /* Nền của các ô là trong suốt */
            color: inherit; /* Màu chữ kế thừa từ dòng */
        }

    /* Hiệu ứng chuyển động khi hover vào hình ảnh */
    .table td img {
        border-radius: 8px; /* Làm tròn góc hình ảnh */
        box-shadow: 0 0 10px rgba(0, 169, 127, 0.7); /* Bóng cho hình ảnh */
        transition: all 0.3s ease; /* Chuyển tiếp hiệu ứng */
    }

        .table td img:hover {
            transform: scale(1.05); /* Tăng kích thước hình ảnh khi hover */
        }

    /* Chỉnh sửa liên kết trong bảng */
    .table td a {
        color: inherit; /* Màu liên kết kế thừa từ dòng */
        text-decoration: none; /* Loại bỏ gạch dưới */
        transition: color 0.3s ease;
    }

        .table td a:hover {
            color: #00A97F; /* Màu chữ của liên kết khi hover */
        }

        /* Hiệu ứng hover cho các icon trong bảng */
        .table td a i {
            transition: transform 0.5s ease; /* Thêm hiệu ứng chuyển động cho icon */
        }

        /* Khi hover vào icon */
        .table td a:hover i {
            transform: scale(1.5); /* Tăng kích thước icon lên 20% khi hover */
        }

</style>
<div class="pt-3 pb-4">
    <span class="titleManager bg-success py-3 px-5 rounded-4 fw-bold text-white">Products Manager</span>
</div>

<!-- Sidebar cho bộ lọc -->
<div id="filterSidebar">
    <a href="javascript:void(0)" class="closebtn" onclick="closeSidebar()">&times;</a>

    <form asp-action="FilterProducts" asp-controller="Admin" method="post" style="width:95%;margin:auto;" id="filterForm">
        <!-- Price Filter -->
        <div class="filter-section mb-4">
            <h5 class="filter-title">Price</h5>
            <input type="number" class="form-range form-control price-input" name="minRange" id="minRange" placeholder="Min price">
            <small id="minPriceError" class="text-danger d-none">Price cannot be less than 0.</small>

            <input type="number" class="form-range form-control price-input mt-2" name="maxRange" id="maxRange" placeholder="Max price">
            <small id="maxPriceError" class="text-danger d-none">Price cannot be less than 0.</small>
        </div>

        <!-- Category Filter -->
        <div class="filter-section mb-4">
            <h5 class="filter-title">Category</h5>
            <select class="form-select" name="category">
                @if (Model.CategoriesModel != null)
                {
                    foreach (var cate in Model.CategoriesModel)
                    {
                        <option value="@cate.Name">@cate.Name</option>
                    }
                }
                else
                {
                    <option disabled>Không có danh mục nào</option>
                }
            </select>
        </div>

        <!-- Platform Filter -->
        <div class="filter-section mb-4">
            <h5 class="filter-title">Platform</h5>
            <select class="form-select" name="platform">
                @if (Model.Product != null)
                {
                    foreach (Client.Models.Enum.ProductEnum.PlatformType platform in Enum.GetValues(typeof(Client.Models.Enum.ProductEnum.PlatformType)))
                    {
                        <option value="@(platform)">@platform</option>
                    }
                }
                else
                {
                    <option disabled>Không có danh mục nào</option>
                }
            </select>
        </div>

        <!-- Discount Filter -->
        <div class="filter-section mb-4">
            <h5 class="filter-title">Discount</h5>
            <select name="discount" class="form-select">
                <option value="True">True</option>
                <option value="False">False</option>
            </select>
        </div>

        <!-- Sold Filter -->
        <div class="filter-section mb-4">
            <h5 class="filter-title">Sort by Sold</h5>
            <select name="sold" class="form-select" aria-label="Type">
                <option value="0">>0</option>
                <option value="100">>100</option>
                <option value="200">>200</option>
                <option value="500">>500</option>
                <option value="1000">>1000</option>
            </select>
        </div>

        <!-- Submit Button -->
        <button type="submit" class="btn btn-primary w-100">Apply Filters</button>
    </form>
</div>



<div class="container mt-4">
    <!-- Thanh tìm kiếm và nút Thêm -->
    <div class="row d-flex justify-content-between align-items-center mb-3 text-center">
        <!-- Form tìm kiếm sản phẩm -->
        <form class="col-md-3 d-flex justify-content-center" asp-action="SearchProduct" asp-controller="Admin" method="post">
            <input class="form-control w-75" type="text" placeholder="Search by..." name="searchString" />
        </form>

        <!-- Nút Filter -->
        <div class="col-md-2 filter-form d-flex justify-content-center align-items-center">
            <button class="btn btn-primary filter-btn" onclick="openSidebar()">Filter</button>
        </div>

        <!-- Form sắp xếp sản phẩm với viền border -->
        <form class="col-md-4 sort-form d-flex justify-content-center align-items-center" asp-action="SortProducts" asp-controller="Admin" method="post">
            <select name="sort" class="form-select me-2 w-75" aria-label="Type">
                <option value="ascPrice">Price Ascending</option>
                <option value="descPrice">Price Descending</option>
                <option value="ascView">View Ascending</option>
                <option value="descView">View Descending</option>
                <option value="ascLike">Like Ascending</option>
                <option value="descLike">Like Descending</option>
                <option value="ascSold">Purchase Count Ascending</option>
                <option value="descSold">Purchase Count Descending</option>
                <option value="free">Free</option>
            </select>
            <button type="submit" class="btn btn-primary">Sort</button>
        </form>

        <!-- Nút Thêm sản phẩm -->
        <div class="col-md-2 d-flex justify-content-center">
            <button class="btn btn-success w-75" data-toggle="modal" data-target="#modalProduct">+ Add</button>
        </div>
    </div>

    <!-- Bảng thông tin -->
    <div id="checkBoxBar" style="display:none">
        <div class="text-end m-2">
            @* <button class="btn btn-success mx-2 w-100">Public All</button> *@
            <a class="text-danger mx-2" href="" data-toggle="modal" data-target="#deleteProductModal">
                <i class="fas fa-trash"></i>
            </a>
        </div>
    </div>
    <table class="table table-bordered table-hover align-middle" style="border-radius:5px;">
        <thead class="table-light">
            <tr>
                <th scope="col">Qr Code</th>
                <th scope="col">Name</th>
                <th scope="col">Price</th>
                <th scope="col">Sold</th>
                <th scope="col">Interactions</th>
                <th scope="col">Discount</th>
                <th scope="col">Platform</th>
                <th scope="col">Image Product</th>
                <th scope="col">Categories</th>
                <th scope="col">Status</th>
                <th scope="col"></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var product in Model.Product)
            {
                <tr>
                    <!-- QR Code Column -->
                    <td class="text-center">
                        <img src="@product.QrCode" alt="QR Code" width="100" height="100" class="qr-thumbnail" data-bs-toggle="modal" data-bs-target="#qrModal" data-qr="@product.QrCode" style="cursor:pointer;" />
                    </td>
                    <td class="text-center">@product.Name</td>
                    <td class="text-center">@product.Price.ToString("C")</td>
                    <td class="text-center">@product.Sold</td>
                    <td class="text-center">
                        <div>Likes: @product.Interactions?.NumberOfLikes</div>
                        <div>Views: @product.Interactions?.NumberOfViews</div>
                    </td>
                    <td class="text-center">@product.Discount %</td>
                    <td class="text-center">@product.Platform</td>
                    <td class="text-center">
                        @if (product.Links != null)
                        {
                            string secondImageUrl = null;
                            int cloudinaryImageCount = 0;

                            foreach (var link in product.Links)
                            {
                                if (link.Url.Contains("cloudinary"))
                                {
                                    cloudinaryImageCount++;

                                    if (cloudinaryImageCount == 2)
                                    {
                                        secondImageUrl = link.Url;
                                        break;
                                    }
                                }
                            }

                            if (secondImageUrl != null)
                            {
                                <div style="width: 50px; height: 50px;">
                                    <img src="@secondImageUrl" alt="Cloudinary Image" style="width: 70px; height: 50px;" />
                                </div>
                            }
                            else
                            {
                                <p>Không có hình ảnh thứ hai</p>
                            }
                        }
                    </td>
                    <td class="text-center">
                        @if (product.Categories != null)
                        {
                            <ul>
                                @foreach (var category in product.Categories)
                                {
                                    <li>@category.CategoryName</li>
                                }
                            </ul>
                        }
                    </td>
                    <td class="text-center">@product.Status</td>
                    <td class="text-center">
                        <a asp-action="UpdateProduct" asp-route-id="@product.Id" class="text-danger mx-2">
                            <i class="fa-regular fa-pen-to-square"></i>
                        </a>
                    </td>
                    <td class="text-center">
                        <a asp-action="DeleteProduct" asp-route-Id="@product.Id" class="text-danger mx-2">
                            <i class="fas fa-trash"></i>
                        </a>
                    </td>
                </tr>
            }
        </tbody>
    </table>

    <!-- Modal for QR Code: Nhấn vào QRcode thì lấy hình ảnh phóng to đó -->
    <div class="modal fade" id="qrModal" tabindex="-1" aria-labelledby="qrModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content">
                <div class="modal-header" style="border:none; padding-bottom:0;">
                    <!-- Giữ lại chỉ nút đóng -->
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body text-center">
                    <img id="qrModalImage" src="" alt="QR Code" style="width: 100%; height: auto;" />
                </div>
            </div>
        </div>
    </div>

    <div class="d-flex justify-content-between" style="margin-top:1.5vw;">
        @* <div>Total: @(Model.totalItem) items</div> *@
        <div style=";font-size: 1em; font-weight: bold; color: #00A97F; display: flex; align-items: center; justify-content: center; padding: 15px 30px; background-color: transparent; border: 2px solid #00A97F; border-radius: 8px; box-shadow: 0 0 10px rgba(0, 169, 127, 0.4), 0 0 15px rgba(0, 169, 127, 0.3); position: relative; text-align: center; transition: all 0.3s;">
            <i class="fas fa-rocket" style="margin-right: 15px; color: #00A97F;"></i>
            Total: <span style="color: #00A97F; padding-left: 5px; padding-right: 5px;">@(Model.totalItem)</span> items
            <div style="position: absolute; top: 0; left: 0; right: 0; bottom: 0; background: linear-gradient(135deg, #00A97F, #800080); border-radius: 8px; opacity: 0.2; z-index: -1;"></div>
        </div>
        <div style="display: flex; align-items: center; justify-content: center;">
             @if (ViewData["Parameters"] != null)
            {
                @if (ViewData["Parameters"] is Dictionary<string, object> routeParams)
                {
                    <form asp-controller="Admin" asp-action="@ViewData["CurrentAction"]" class="d-inline">
                        @foreach (var param in routeParams)
                        {
                            <input name="@param.Key" value="@param.Value" style="display:none" />
                        }
                        <select name="pageSize" class="form-select form-select-sm w-auto d-inline-block" onchange="this.form.submit()">
                            <option>Select records per page</option>
                            <option value="3">3 records per page</option>
                            <option value="5">5 records per page</option>
                            <option value="10">10 records per page</option>
                        </select>
                        <input type="hidden" name="page" value="1" />
                    </form>

                }
                else
                {
                    <form asp-controller="Admin" asp-action="@ViewData["CurrentAction"]" class="d-inline">
                        <input name="@ViewData["NamePara"]" value="@ViewData["Parameters"]" style="display:none" />
                        <select name="pageSize" class="form-select form-select-sm w-auto d-inline-block" onchange="this.form.submit()">
                            <option>Select records per page</option>
                            <option value="3">3 records per page</option>
                            <option value="5">5 records per page</option>
                            <option value="10">10 records per page</option>
                        </select>
                        <input type="hidden" name="page" value="1" />
                    </form>
                }

            }
            else
            {
                <form method="get" asp-controller="Admin" asp-action="@ViewData["CurrentAction"]" class="d-inline">
                    <select name="pageSize" class="form-select form-select-sm w-auto d-inline-block" onchange="this.form.submit()">
                        <option>Select records per page</option>
                        <option value="3">3 records per page</option>
                        <option value="5">5 records per page</option>
                        <option value="10">10 records per page</option>
                    </select>
                    <input type="hidden" name="page" value="1" />
                </form>
            }

            <nav aria-label="Page navigation example" class="d-inline-block">
                <ul class="pagination pagination-sm mb-0">
                    <li class="page-item @(Model.pageNumber == 1 ? "disabled" : "")">
                        @if (ViewData["Parameters"] != null)
                        {
                                @* <a class="page-link" asp-controller="Admin" asp-route-@param.Key="@(param.Value)" asp-action="@ViewData["CurrentAction"]" asp-route-page="@(Model.pageNumber - 1)" asp-route-pageSize="@(ViewContext.HttpContext.Request.Query["pageSize"])">
                                    Previous
                                </a> *@
                            @if (ViewData["Parameters"] is Dictionary<string, object> routeParams)
                            {
                                <form asp-controller="Admin" asp-action="@ViewData["CurrentAction"]" asp-route-page="@(Model.pageNumber - 1)" asp-route-pageSize="@(ViewContext.HttpContext.Request.Query["pageSize"])">
                                    @* <option value="@ViewData["Parameters"]" style="display:none;" selected></option> *@
                                    @* <input name="@ViewData["NamePara"]" value="@ViewData["Parameters"]" style="display:none" /> *@
                                    @foreach (var param in routeParams)
                                    {
                                        <input name="@param.Key" value="@param.Value" style="display:none" />
                                    }
                                    <button type="submit" class="page-link">
                                        Previous
                                    </button>
                                </form>
                            }
                            else
                            {
                                <form asp-controller="Admin" asp-action="@ViewData["CurrentAction"]" asp-route-page="@(Model.pageNumber - 1)" asp-route-pageSize="@(ViewContext.HttpContext.Request.Query["pageSize"])">
                                    @* <option value="@ViewData["Parameters"]" style="display:none;" selected></option> *@
                                    <input name="@ViewData["NamePara"]" value="@ViewData["Parameters"]" style="display:none" />

                                    <button type="submit" class="page-link">
                                        Previous
                                    </button>
                                </form>
                            }
                        }
                        else
                        {
                            <a class="page-link" asp-controller="Admin" asp-action="@ViewData["CurrentAction"]" asp-route-page="@(Model.pageNumber - 1)" asp-route-pageSize="@(ViewContext.HttpContext.Request.Query["pageSize"])">
                                Previous
                            </a>
                        }
                    </li>
                    @for (var pg = 1; pg <= Model.pageCount; pg++)
                    {
                        <li class="page-item @(pg == Model.pageNumber ? "active" : "")">
                            
                            @if (ViewData["Parameters"] != null)
                            {
                                @* foreach (var param in routeParams2)
                                {
                                    <a class="page-link" asp-controller="Admin" asp-route-@param.Key="@(param.Value)" asp-action="@ViewData["CurrentAction"]" asp-route-page="@pg" asp-route-pageSize="@(ViewContext.HttpContext.Request.Query["pageSize"])">
                                        @pg
                                    </a>
                                } *@
                                @if (ViewData["Parameters"] is Dictionary<string, object> routeParams)
                                {
                                    <form asp-controller="Admin" asp-action="@ViewData["CurrentAction"]" asp-route-page="@pg" asp-route-pageSize="@(ViewContext.HttpContext.Request.Query["pageSize"])">
                                        @*  <option value="@ViewData["Parameters"]" style="display:none;" selected></option> *@
                                        @* <input name="@ViewData["NamePara"]" value="@ViewData["Parameters"]" style="display:none" /> *@
                                        @foreach (var param in routeParams)
                                        {
                                            <input name="@param.Key" value="@param.Value" style="display:none" />
                                        }
                                        <button type="submit" class="page-link">
                                            @pg
                                        </button>
                                    </form>
                                }
                                else
                                {
                                    <form asp-controller="Admin" asp-action="@ViewData["CurrentAction"]" asp-route-page="@pg" asp-route-pageSize="@(ViewContext.HttpContext.Request.Query["pageSize"])">
                                        @*  <option value="@ViewData["Parameters"]" style="display:none;" selected></option> *@
                                        <input name="@ViewData["NamePara"]" value="@ViewData["Parameters"]" style="display:none" />
                                        <button type="submit" class="page-link">
                                            @pg
                                        </button>
                                    </form>
                                }
                            }
                            else
                            {
                                <a class="page-link" asp-controller="Admin" asp-action="@ViewData["CurrentAction"]" asp-route-page="@pg" asp-route-pageSize="@(ViewContext.HttpContext.Request.Query["pageSize"])">
                                    @pg
                                </a>
                            }
                        </li>
                    }
                    <li class="page-item @(Model.pageNumber == Model.pageCount ? "disabled" : "")">
                       
                        @if (ViewData["Parameters"] != null)
                        {
                            @if (ViewData["Parameters"] is Dictionary<string, object> routeParams)
                            {
                                <form asp-controller="Admin" asp-action="@ViewData["CurrentAction"]" asp-route-page="@(Model.pageNumber + 1)" asp-route-pageSize="@(ViewContext.HttpContext.Request.Query["pageSize"])">
                                    @* <option value="@ViewData["Parameters"]" style="display:none;" selected></option> *@
                                    @foreach (var param in routeParams)
                                    {
                                        <input name="@param.Key" value="@param.Value" style="display:none" />
                                    }
                                    <button type="submit" class="page-link">
                                        Next
                                    </button>
                                </form>
                            }
                            else
                            {
                                <form asp-controller="Admin" asp-action="@ViewData["CurrentAction"]" asp-route-page="@(Model.pageNumber + 1)" asp-route-pageSize="@(ViewContext.HttpContext.Request.Query["pageSize"])">
                                    @* <option value="@ViewData["Parameters"]" style="display:none;" selected></option> *@
                                    <input name="@ViewData["NamePara"]" value="@ViewData["Parameters"]" style="display:none" />
                                    <button type="submit" class="page-link">
                                        Next
                                    </button>
                                </form>
                            }
                            
                        }
                        else
                        {
                            <a class="page-link" asp-controller="Admin" asp-action="@ViewData["CurrentAction"]" asp-route-page="@(Model.pageNumber + 1)" asp-route-pageSize="@(ViewContext.HttpContext.Request.Query["pageSize"])">
                                Next
                            </a>
                        }
                    </li>
                </ul>
            </nav>
        </div>
    </div>
</div>


















<div class="modal fade" id="modalProduct" tabindex="-1" role="dialog" aria-labelledby="exampleModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-xl">
        <div class="modal-content">
            <div class="container-fluid p-5">
                @await Html.PartialAsync("CreateProduct", Model.CreateProductModel)
            </div>
        </div>
    </div>
</div>











<!-- Delete Confirmation Modal -->
<div class="modal fade" id="deleteProductModal" tabindex="-1" aria-labelledby="deleteModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="deleteModalLabel">Confirm Deletion</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <p>Are you sure you want to delete this item? This action cannot be undone.</p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-danger">Delete</button>
            </div>
        </div>
    </div>
</div>











<script src="https://cdn.jsdelivr.net/simplemde/latest/simplemde.min.js"></script>

<script>
    // Mở sidebar
    function openSidebar() {
        document.getElementById("filterSidebar").classList.add("open");
    }

    // Đóng sidebar
    function closeSidebar() {
        document.getElementById("filterSidebar").classList.remove("open");
    }


    function displayFileInfo() {
        const input = document.getElementById('fileInput');
        const file = input.files[0]; // Lấy file đầu tiên (vì người dùng có thể chọn nhiều file)
        if (file) {
            // Kiểm tra kích thước file (ví dụ 1GB = 1073741824 bytes)
            if (file.size > 1073741824) {
                alert('File quá lớn, hãy chọn file dưới 1 GB.');
                return;
            }

            // Hiển thị thông tin file
            const fileInfo = `
                            <strong>File Name:</strong> ${file.name} <br>
                            <strong>File Size:</strong> ${(file.size / 1024 / 1024).toFixed(2)} MB <br>
                            <strong>File Type:</strong> ${file.type}
                            <div class="m-2">
                                <label class="p-2 border border-1">
                                    <input type="radio" value="Windows" name="Platforms" /> Windows
                                </label>
                                <label class="p-2 border border-1">
                                    <input type="radio" value="MacOS" name="Platforms" /> MacOS
                                </label>
                                <label class="p-2 border border-1">
                                    <input type="radio" value="Linux" name="Platforms" /> Linux
                                </label>
                            </div>
                        `;
            document.getElementById('fileInfo').innerHTML = fileInfo;
        }
    }

    var simplemde = new SimpleMDE({
        element: document.getElementById("descriptionEditor"),
        toolbar: ["bold", "italic", "heading", "|", "quote", "unordered-list", "ordered-list", "|", "link", "image", "|", "preview", "side-by-side", "fullscreen", "guide"]
    });





    const priceRange = document.getElementById("priceRange");
    const priceValue = document.getElementById("priceValue");

    // Đặt giá trị mặc định cho hiển thị
    priceValue.textContent = `$${priceRange.value}`;

    // Cập nhật giá trị khi thanh trượt được kéo
    priceRange.addEventListener("input", function () {
        // Cập nhật giá trị hiển thị
        priceValue.textContent = `$${priceRange.value}`;

        // Đặt giá trị của thuộc tính value cho thanh trượt (đã tự động cập nhật nhưng vẫn có thể làm rõ)
        priceRange.setAttribute("value", priceRange.value);
    });

</script>

@section Scripts {
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script> <!-- Đảm bảo jQuery đã được tải -->

    <script type="text/javascript">
        function initializeCategoryScripts() {
            let categoryIndex = 0;

            // Hàm thêm danh mục
            function addCategory() {
                let html = `<div class="input-group mb-2">
                                        <input type="text" name="Categories[${categoryIndex}]" class="form-control" placeholder="Enter category" />
                                        <div class="input-group-append">
                                            <button type="button" class="btn btn-danger" onclick="removeCategory(this)">Remove</button>
                                        </div>
                                    </div>`;
                $('#categories-list').append(html);
                categoryIndex++;
            }

            // Gán hàm cho window để dùng được khi click
            window.addCategory = addCategory;

            // Hàm xóa danh mục
            function removeCategory(button) {
                $(button).closest('.input-group').remove();
            }

            // Gán hàm này vào window để có thể gọi khi bấm Remove
            window.removeCategory = removeCategory;
        }

        // Kiểm tra nếu partial view được tải qua Ajax và script này cần được kích hoạt sau khi nạp
        $(document).on('ajaxComplete', function () {
            initializeCategoryScripts(); // Khởi tạo script sau khi partial view được nạp qua Ajax
        });

        // Hoặc gọi trực tiếp nếu partial không được nạp qua Ajax
        $(document).ready(function () {
            initializeCategoryScripts();
        });
    </script>

    <script>
        $(document).ready(function () {
            // Event listener for QR code thumbnail click
            $('.qr-thumbnail').on('click', function () {
                var qrCodeUrl = $(this).data('qr');
                $('#qrModalImage').attr('src', qrCodeUrl); // Set image URL for modal
            });
        });
    </script>

    <script>
        // Hàm kiểm tra và hiển thị lỗi
        function validatePriceInput(inputElement, errorElement) {
            if (inputElement.value < 0) {
                errorElement.classList.remove('d-none');
            } else {
                errorElement.classList.add('d-none');
            }
        }

        // Lấy các phần tử input và các phần tử thông báo lỗi
        const minRange = document.getElementById('minRange');
        const maxRange = document.getElementById('maxRange');
        const minPriceError = document.getElementById('minPriceError');
        const maxPriceError = document.getElementById('maxPriceError');

        // Gắn sự kiện input để kiểm tra giá trị khi người dùng nhập
        minRange.addEventListener('input', function () {
            validatePriceInput(minRange, minPriceError);
        });

        maxRange.addEventListener('input', function () {
            validatePriceInput(maxRange, maxPriceError);
        });

        // Ngăn form submit nếu có lỗi
        document.getElementById('filterForm').addEventListener('submit', function (event) {
            if (minRange.value < 0 || maxRange.value < 0) {
                event.preventDefault();
            }
        });
    </script>
}



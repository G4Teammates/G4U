@using Client.Models
@using System.Text.Json
@model AllModel

@{
    Layout = "_LayoutAdmin";
}

<div class="w-100">
    <div class="row">
        <div class="col-md-3 mb-4 m-auto">
            <a asp-controller="Admin" asp-action="UsersManager" class="text-white text-decoration-none">
                <div class="product-item" style="background-image: url('/Image/usermanager.jpeg'); background-size: cover; background-position: center;">
                    <div style="z-index:2;"><h3 class="text-center">Users Manager</h3></div>
                </div>
            </a>
        </div>
        <div class="col-md-3 mb-4 m-auto">
            <a asp-controller="Admin" asp-action="ProductsManager" class="text-white text-decoration-none">
                <div class="product-item" style="background-image: url('/Image/productmanager.jpeg'); background-size: cover; background-position: center;">
                    <div style="z-index:2;"><h3 class="text-center">Products Manager</h3></div>
                </div>
            </a>
        </div>
        <div class="col-md-3 mb-4 m-auto">
            <a asp-controller="Admin" asp-action="OrdersManager" class="text-white text-decoration-none">
                <div class="product-item" style="background-image: url('/Image/ordermanager.jpeg'); background-size: cover; background-position: center;">
                    <div style="z-index:2;"><h3 class="text-center">Orders Manager</h3></div>
                </div>
            </a>
        </div>
        <div class="col-md-3 mb-4 m-auto">
            <a asp-controller="Admin" asp-action="CategoriesManager" class="text-white text-decoration-none">
                <div class="product-item" style="background-image: url('/Image/avatar.jpeg'); background-size: cover; background-position: center;">
                    <div style="z-index:2;"><h3 class="text-center">Categories Manager</h3></div>
                </div>
            </a>
        </div>
    </div>
 
    <div class="row">
        <div class="row col-6">
            @{
                var latestStat = Model.statis.LastOrDefault();
                var previousStat = Model.statis.ElementAtOrDefault(Model.statis.Count - 2);

                decimal CalculateGrowth(decimal? latestValue, decimal? previousValue)
                {
                    if (latestValue != null && previousValue != null && previousValue > 0)
                    {
                        return Math.Round(((latestValue.Value - previousValue.Value) / previousValue.Value) * 100, 3);
                    }
                    return 0;
                }

                string GetGrowthClass(decimal growth) => growth >= 0 ? "text-success" : "text-danger";
                string GetGrowthSymbol(decimal growth) => growth >= 0 ? "▲" : "▼";
            }

            <div class="col-12 mb-3">
                <div class="card p-3">
                    <div class="stat-card">
                        <div class="stat-header">
                            <h6>Total Revenue</h6>
                            <p>
                                $<span id="totalRevenue">@latestStat.TotalWebsite.TotalRevenue</span>     <span style="font-size:small" class="stat-growth @(GetGrowthClass(CalculateGrowth(latestStat.TotalWebsite.TotalRevenue, previousStat.TotalWebsite.TotalRevenue)))">
                                    @(GetGrowthSymbol(CalculateGrowth(latestStat.TotalWebsite.TotalRevenue, previousStat.TotalWebsite.TotalRevenue)))
                                    @CalculateGrowth(latestStat.TotalWebsite.TotalRevenue, previousStat.TotalWebsite.TotalRevenue)%
                                </span>
                            </p>
                        </div>
                        <canvas id="revenueChart"></canvas>
                    </div>
                </div>
            </div>


            <!-- Views Chart -->
            <div class="col-12  mb-3">
                <div class="card p-3">
                    <div class="stat-card">
                        <h6>Total Views </h6> 
                        <p>
                            <span id="TotalViews">@latestStat.TotalWebsite.TotalViews</span>     <span style="font-size:small" class="stat-growth @(GetGrowthClass(CalculateGrowth(latestStat.TotalWebsite.TotalViews, previousStat.TotalWebsite.TotalViews)))">
                                @(GetGrowthSymbol(CalculateGrowth(latestStat.TotalWebsite.TotalViews, previousStat.TotalWebsite.TotalViews)))
                                @CalculateGrowth(latestStat.TotalWebsite.TotalViews, previousStat.TotalWebsite.TotalViews)%
                            </span>
                        </p>
                        <canvas id="viewsChart"></canvas>
                    </div>
                </div>
            </div>

            <!-- Products Chart -->
            <div class="col-12  mb-3">
                <div class="card p-3">
                    <div class="stat-card">
                        <h6>Total Products</h6> 
                        <p>
                            <span id="TotalProducts">@latestStat.TotalWebsite.TotalProducts</span>     <span style="font-size:small" class="stat-growth @(GetGrowthClass(CalculateGrowth(latestStat.TotalWebsite.TotalProducts, previousStat.TotalWebsite.TotalProducts)))">
                                @(GetGrowthSymbol(CalculateGrowth(latestStat.TotalWebsite.TotalProducts, previousStat.TotalWebsite.TotalProducts)))
                                @CalculateGrowth(latestStat.TotalWebsite.TotalProducts, previousStat.TotalWebsite.TotalProducts)%
                            </span>
                        </p>
                        <canvas id="productsChart"></canvas>
                    </div>
                </div>
            </div>

            <!-- Solds Chart -->
            <div class="col-12  mb-3">
                <div class="card p-3">
                    <div class="stat-card">
                        <h6>Total Solds</h6> 
                        <p>
                            <span id="TotalSolds">@latestStat.TotalWebsite.TotalSolds</span>     <span style="font-size:small" class="stat-growth @(GetGrowthClass(CalculateGrowth(latestStat.TotalWebsite.TotalSolds, previousStat.TotalWebsite.TotalSolds)))">
                                @(GetGrowthSymbol(CalculateGrowth(latestStat.TotalWebsite.TotalSolds, previousStat.TotalWebsite.TotalSolds)))
                                @CalculateGrowth(latestStat.TotalWebsite.TotalSolds, previousStat.TotalWebsite.TotalSolds)%
                            </span>
                        </p>
                        <canvas id="soldsChart"></canvas>
                    </div>
                </div>
            </div>

            <!-- Users Chart -->
            <div class="col-12  mb-3">
                <div class="card p-3">
                    <div class="stat-card">
                        <h6>Total Users</h6> 
                        <p>
                            <span id="TotalUsers">@latestStat.TotalWebsite.TotalUsers</span>     <span style="font-size:small" class="stat-growth @(GetGrowthClass(CalculateGrowth(latestStat.TotalWebsite.TotalUsers, previousStat.TotalWebsite.TotalUsers)))">
                                @(GetGrowthSymbol(CalculateGrowth(latestStat.TotalWebsite.TotalUsers, previousStat.TotalWebsite.TotalUsers)))
                                @CalculateGrowth(latestStat.TotalWebsite.TotalUsers, previousStat.TotalWebsite.TotalUsers)%
                            </span>
                        </p>
                        <canvas id="usersChart"></canvas>
                    </div>
                </div>
            </div>
        </div>

        <div class="row col-6">
            <div class="col-12">
                <div class="card">
                    <div class="card-body">
                        <h5 class="card-title">Stastistical User</h5>
                        <form id="statisticsForm" class="d-flex">
                            <div class="mb-3 mx-2 mt-2">
                                <label for="textInput" class="form-label sr-only">Nhập nội dung</label>
                                <input type="text" class="form-control form-control-sm" id="textInput" name="UserName" placeholder="Nhập vào đây" required>
                            </div>
                            <div class="mb-3 mx-2 mt-2">
                                <label for="monthInput" class="form-label sr-only">Chọn tháng</label>
                                <input type="month" class="form-control form-control-sm" id="monthInput" name="CreateAt" required>
                            </div>
                            <button type="submit" class="btn btn-danger btn-sm">Submit</button>
                        </form>

                    </div>
                </div>

                <!-- Vùng để hiển thị kết quả khi submit -->
                <div id="statisticsResult" class="mt-3"></div>
            </div>



            <div class="col-12">
                <div class="card">
                    <div class="card-body">
                        <h5 class="card-title">Product Statistics</h5>
                        <table class="table table-striped">
                            <thead>
                                <tr>
                                    <th scope="col">CreateAt</th>
                                    <th scope="col">Revenue</th>
                                    <th scope="col">Views</th>
                                    <th scope="col">Products</th>
                                    <th scope="col">Solds</th>
                                    <th scope="col">Users</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var product in Model.statis)
                                {
                                    <tr style="background-color:@(product.TotalWebsite?.TotalRevenue > 5000 ? "rgb(198, 239, 206)" : "rgb(211, 211, 211)")">
                                        <td>@product.CreateAt.ToString("dd/MM/yyyy")</td>
                                        <td>@product.TotalWebsite?.TotalRevenue</td>
                                        <td>@product.TotalWebsite?.TotalViews</td>
                                        <td>@product.TotalWebsite?.TotalProducts</td>
                                        <td>@product.TotalWebsite?.TotalSolds</td>
                                        <td>@product.TotalWebsite?.TotalUsers</td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>
    </div>

</div>


<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<script>

    // Dữ liệu cho từng biểu đồ
    var labels = @Html.Raw(JsonSerializer.Serialize(Model.statis.Select(x => x.CreateAt.ToString("dd MMMM"))));

    var revenueData = @Html.Raw(JsonSerializer.Serialize(Model.statis.Select(x => x.TotalWebsite.TotalRevenue)));
    var viewsData = @Html.Raw(JsonSerializer.Serialize(Model.statis.Select(x => x.TotalWebsite.TotalViews)));
    var productsData = @Html.Raw(JsonSerializer.Serialize(Model.statis.Select(x => x.TotalWebsite.TotalProducts)));
    var soldsData = @Html.Raw(JsonSerializer.Serialize(Model.statis.Select(x => x.TotalWebsite.TotalSolds)));
    var usersData = @Html.Raw(JsonSerializer.Serialize(Model.statis.Select(x => x.TotalWebsite.TotalUsers)));

    // Tạo hàm để tạo biểu đồ
    function createChart(ctx, label, data, backgroundColor, borderColor) {
        return new Chart(ctx, {
            type: 'line',
            data: {
                labels: labels,
                datasets: [{
                    label: label,
                    data: data,
                    backgroundColor: backgroundColor,
                    borderColor: borderColor,
                    fill: true,
                    tension: 0.4,
                    pointBackgroundColor: borderColor,
                    pointBorderColor: borderColor,
                }]
            },
            options: {
                responsive: true,
                scales: {
                    y: {
                        beginAtZero: false
                    }
                },
                plugins: {
                    legend: {
                        display: false
                    }
                }
            }
        });
    }

    // Khởi tạo từng biểu đồ với id tương ứng
    createChart(document.getElementById('revenueChart').getContext('2d'), 'Revenue', revenueData, 'rgba(85, 85, 255, 0.1)', '#5555ff');
    createChart(document.getElementById('viewsChart').getContext('2d'), 'Views', viewsData, 'rgba(255, 99, 132, 0.1)', '#ff6384');
    createChart(document.getElementById('productsChart').getContext('2d'), 'Products', productsData, 'rgba(75, 192, 192, 0.1)', '#4bc0c0');
    createChart(document.getElementById('soldsChart').getContext('2d'), 'Solds', soldsData, 'rgba(255, 205, 86, 0.1)', '#ffcd56');
    createChart(document.getElementById('usersChart').getContext('2d'), 'Users', usersData, 'rgba(153, 102, 255, 0.1)', '#9966ff');
</script>

<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>

@section Scripts {
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script>
        // Xử lý khi form được submit
        $("#statisticsForm").on("submit", function (e) {
            e.preventDefault();

            var userName = $("#textInput").val();
            var createAt = $("#monthInput").val();

            // Gửi yêu cầu AJAX tới server
            $.ajax({
                url: '@Url.Action("StastistiicalByUser", "Admin")',
                type: 'GET',
                data: {
                    UserName: userName,
                    CreateAt: createAt
                },
                success: function (data) {
                    // Hiển thị kết quả vào div #statisticsResult
                    $("#statisticsResult").html(data);
                },
                error: function () {
                    $("#statisticsResult").html("<p>Error occurred while fetching data.</p>");
                }
            });
        });
    </script>
    }

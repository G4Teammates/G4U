@using Client.Models.ProductDTO
@model ProductViewModel
<link href="https://fonts.googleapis.com/css2?family=Poppins:wght@600&display=swap" rel="stylesheet">


<div class="container-fluid mt-5" style="min-height:700px;">
    <section class="modern-heading">
        <h1 class="responsive-heading">Other Product</h1>
    </section>

    <div class="mt-3">
        
        <div class="d-flex align-items-center justify-content-between sort-container row ms-1">
            <button class="col-3 col-sm-3 col-md-3 btn btn-primary" type="button" data-bs-toggle="offcanvas" data-bs-target="#offcanvasExample" aria-controls="offcanvasExample">
                Filter
            </button>
            <div class="offcanvas offcanvas-start" tabindex="-1" id="offcanvasExample" aria-labelledby="offcanvasExampleLabel" style="padding:0 5px;">
                <div class="offcanvas-header filter-container">
                    <h4 class="mt-3 text-center">Filters</h4>
                    <button type="button" class="btn-close text-reset" data-bs-dismiss="offcanvas" aria-label="Close"></button>
                </div>
                <div class="offcanvas-body">
                    <hr class="mb-4">
                    <!-- -------------------------------------------------------------------------------------------------------------------------------------------------- -->
                    <form asp-action="FilterProducts" asp-controller="Product" method="post">
                        <!-- Price Filter -->
                        <div class="filter-section mb-4">
                            <h5 class="filter-title">Price</h5>
                            <div class="d-flex gap-2">
                                <input type="number" class="form-control price-input" name="minRange" id="minRange" placeholder="Min price" min="0">
                                <small id="minPriceError" class="text-danger d-none">Price cannot be less than 0.</small>

                                <input type="number" class="form-control price-input" name="maxRange" id="maxRange" placeholder="Max price" min="0">
                                <small id="maxPriceError" class="text-danger d-none">Price cannot be less than 0.</small>
                                <small id="rangeError" class="text-danger d-none">Max price must be greater than Min price.</small>
                            </div>
                            <div id="priceError" style="color: red; display: none;">Price cannot be less than 0.</div>
                        </div>

                        <!-- Category Filter -->
                        <div class="filter-section mb-4">
                            <h5 class="filter-title">Category</h5>
                            <select class="form-select" name="category">
                                @if (Model.CategoriesModel != null)
                                {
                                    <option value="">None</option>
                                    foreach (var cate in Model.CategoriesModel)
                                    {
                                        <option value="@cate.Name">@cate.Name</option>
                                    }
                                }
                                else
                                {
                                    <option disabled>Không có danh mục nào</option>
                                }
                            </select>
                        </div>

                        <!-- Platform Filter -->
                        <div class="filter-section mb-4">
                            <h5 class="filter-title">Platform</h5>
                            <select class="form-select" name="platform">
                                @if (Model.Product != null)
                                {
                                    <option value="">None</option>
                                    foreach (Client.Models.Enum.ProductEnum.PlatformType platform in Enum.GetValues(typeof(Client.Models.Enum.ProductEnum.PlatformType)))
                                    {
                                        <option value="@(platform)">@platform</option>
                                    }
                                }
                                else
                                {
                                    <option disabled>Không có danh mục nào</option>
                                }
                            </select>
                        </div>

                        <!-- Discount Filter -->
                        <div class="filter-section mb-4">
                            <h5 class="filter-title">Discount</h5>
                            <select name="discount" class="form-select">
                                <option value="">None</option>
                                <option value="True">True</option>
                                <option value="False">False</option>
                            </select>
                        </div>

                        <!-- Sold Filter -->
                        <div class="filter-section mb-4">
                            <h5 class="filter-title">Sold</h5>
                            <select name="sold" class="form-select" aria-label="Type">
                                <option value="">None</option>
                                <option value="0">>0</option>
                                <option value="100">>100</option>
                                <option value="200">>200</option>
                                <option value="500">>500</option>
                                <option value="1000">>1000</option>
                            </select>
                        </div>

                        <!-- Submit Button -->
                        <button type="submit" class="btn btn-primary w-100">Apply Filters</button>
                    </form>
                </div>
            </div>
            <!-- Sort -->
            <form class="col-8 col-sm-8 col-md-8 d-inline-flex align-items-center justify-content-end" asp-action="SortProducts" asp-controller="Product" method="post">
                <select name="sort" class="form-select me-2 w-75 sort-select">
                    <option value="ascPrice" class="sort-option">Price Ascending</option>
                    <option value="descPrice" class="sort-option">Price Descending</option>
                    <option value="ascView" class="sort-option">View Ascending</option>
                    <option value="descView" class="sort-option">View Descending</option>
                    <option value="ascLike" class="sort-option">Like Ascending</option>
                    <option value="descLike" class="sort-option">Like Descending</option>
                    <option value="ascSold" class="sort-option">Purchase Count Ascending</option>
                    <option value="descSold" class="sort-option">Purchase Count Descending</option>
                    <option value="free" class="sort-option">Free</option>
                </select>
                <button type="submit" class="btn btn-primary sort-btn">
                    Sort
                </button>
            </form>

        </div>


        <div class="me-1">
            <div class="wrapper_other">
                @if (Model.Product != null)
                {
                    foreach (var product in Model.Product)
                    {
                        <a asp-controller="Product" asp-action="ProductDetail" asp-route-Id="@product.Id" class="col-3 col-sm-3 col-md-3 mt-4 text-decoration-none" style="color: inherit;">

                            <div class="card_other1">
                                @if (product.Links != null)
                                {
                                    string firstImageUrl = null;

                                    foreach (var link in product.Links)
                                    {
                                        if (link.Url.Contains("cloudinary"))
                                        {
                                            firstImageUrl = link.Url;
                                            break;
                                        }
                                    }

                                    if (firstImageUrl != null)
                                    {
                                        <img src="@firstImageUrl" alt="Cloudinary Image" />
                                    }
                                }
                                <div class="info_other">
                                    <h4>@product.Name</h4>
                                    <p>
                                        @(product.Description.Length > 100
                                            ? product.Description.Substring(0, 100) + "..."
                                            : product.Description)
                                    </p>
                                    <div class="row d-flex align-items-center justify-content-between">
                                        <div class="col-5 col-sm-5 col-md-5 text-center btn_orther">Read More</div>
                                        <div class="col-4 col-sm-4 col-md-4 col-md-4"></div>
                                        <div title="Wishlist" class="col-1 col-sm-1 col-md-1 col-md-1 heart-container">
                                            <form id="wishlistForm" method="post">
                                                <input type="hidden" name="ProductId" id="ProductId" value="@product.Id" />
                                                <input type="hidden" name="ProductName" id="ProductName" value="@product.Name" />
                                                <input type="hidden" name="ProductPrice" id="ProductPrice" value="@product.Price" />

                                                @{
                                                    string secondImageUrl2 = null;
                                                    int imageCount2 = 0;
                                                }
                                                @foreach (var link in product.Links)
                                                {
                                                    if (link.Url.Contains("cloudinary"))
                                                    {
                                                        imageCount2++;
                                                        if (imageCount2 == 2)
                                                        {
                                                            secondImageUrl2 = link.Url;
                                                            break;
                                                        }
                                                    }
                                                }
                                                <input type="hidden" name="ProductImage" id="ProductImage" value="@secondImageUrl2" />

                                                <input type="checkbox" id="wishlistCheckbox" class="checkbox" onclick="addToWishList('@product.Id', '@product.Name', '@product.Price', '@secondImageUrl2')" />
                                                <div class="svg-container">
                                                    <svg xmlns="http://www.w3.org/2000/svg" class="svg-outline" viewBox="0 0 24 24">
                                                        <path d="M17.5,1.917a6.4,6.4,0,0,0-5.5,3.3,6.4,6.4,0,0,0-5.5-3.3A6.8,6.8,0,0,0,0,8.967c0,4.547,4.786,9.513,8.8,12.88a4.974,4.974,0,0,0,6.4,0C19.214,18.48,24,13.514,24,8.967A6.8,6.8,0,0,0,17.5,1.917Zm-3.585,18.4a2.973,2.973,0,0,1-3.83,0C4.947,16.006,2,11.87,2,8.967a4.8,4.8,0,0,1,4.5-5.05A4.8,4.8,0,0,1,11,8.967a1,1,0,0,0,2,0,4.8,4.8,0,0,1,4.5-5.05A4.8,4.8,0,0,1,22,8.967C22,11.87,19.053,16.006,13.915,20.313Z"></path>
                                                    </svg>
                                                    <svg xmlns="http://www.w3.org/2000/svg" class="svg-filled" viewBox="0 0 24 24">
                                                        <path d="M17.5,1.917a6.4,6.4,0,0,0-5.5,3.3,6.4,6.4,0,0,0-5.5-3.3A6.8,6.8,0,0,0,0,8.967c0,4.547,4.786,9.513,8.8,12.88a4.974,4.974,0,0,0,6.4,0C19.214,18.48,24,13.514,24,8.967A6.8,6.8,0,0,0,17.5,1.917Z"></path>
                                                    </svg>
                                                    <svg xmlns="http://www.w3.org/2000/svg" height="100" width="100" class="svg-celebrate">
                                                        <polygon points="10,10 20,20"></polygon>
                                                        <polygon points="10,50 20,50"></polygon>
                                                        <polygon points="20,80 30,70"></polygon>
                                                        <polygon points="90,10 80,20"></polygon>
                                                        <polygon points="90,50 80,50"></polygon>
                                                        <polygon points="80,80 70,70"></polygon>
                                                    </svg>
                                                </div>
                                            </form>
                                        </div>
                                    </div>
                                </div>
                                <div class="view-count">
                                    <i class="fa-solid fa-eye" style="color:black; width:20px; height:20px;"></i>
                                    <span style="color:black;">@product.Interactions.NumberOfViews</span>
                                </div>
                                <div class="like-dislike-container">
                                    <form asp-action="IncreaseLikeProduct" asp-controller="Product" method="post" style="display:inline;">
                                        <input type="hidden" name="productID" value="@product.Id" />
                                        <span id="like-count-@product.Id" class="like-count" style="color:black;">@product.Interactions.NumberOfLikes</span>
                                        <i class="fa-solid fa-thumbs-up like-icon" style="color:black; width:20px; height:20px;"></i>
                                    </form>
                                    <form asp-action="DecreaseLikeProduct" asp-controller="Product" method="post" style="display:inline;">
                                        <input type="hidden" name="productID" value="@product.Id" />
                                        <span id="dislike-count-@product.Id" class="dislike-count" style="color:black;">@product.Interactions.NumberOfDisLikes</span>
                                        <i class="fa-solid fa-thumbs-down dislike-icon" style="color:black; width:20px; height:20px;"></i>
                                    </form>
                                </div>
                            </div>
                            
                        </a>
                    }
                }
            </div>
        </div>

    </div>
</div>

<div class="d-flex align-items-center justify-content-between row" style="margin-top:3vw;">
    <div class="col-12 col-sm-12 col-md-2" style=" font-weight: bold; color: #00A97F; display: flex; align-items: center; justify-content: center; padding: 15px 30px; background-color: transparent; border: 2px solid #00A97F; border-radius: 8px; box-shadow: 0 0 10px rgba(0, 169, 127, 0.4), 0 0 15px rgba(0, 169, 127, 0.3); position: relative; text-align: center; transition: all 0.3s;">
        <i class="fas fa-rocket" style="margin-right: 15px; color: #00A97F;"></i>
        Total: <span style="color: #00A97F; padding-left: 5px; padding-right: 5px;">@(Model.totalItem)</span> items

    </div>


    <div class="col-12 col-md-12 col-md-8 d-flex justify-content-end align-items-center">
        @if (ViewData["Parameters"] != null)
        {
            @if (ViewData["Parameters"] is Dictionary<string, object> routeParams)
            {
                <form method="get" asp-controller="Product" asp-action="@ViewData["CurrentAction"]" class="d-inline mt-2">
                    @foreach (var param in routeParams)
                    {
                        <input name="@param.Key" value="@param.Value" style="display:none" />
                    }
                    <select name="pageSize" class="form-select form-select-sm w-auto d-inline-block" onchange="this.form.submit()">
                        <option>Select records</option>
                        <option value="3">3 records per page</option>
                        <option value="5">5 records per page</option>
                        <option value="10">10 records per page</option>
                    </select>
                    <input type="hidden" name="page" value="1" />
                </form>

            }
            else
            {
                <form method="get" asp-controller="Product" asp-action="@ViewData["CurrentAction"]" class="d-inline">
                    <input name="@ViewData["NamePara"]" value="@ViewData["Parameters"]" style="display:none" />
                    <select name="pageSize" class="form-select form-select-sm w-auto d-inline-block" onchange="this.form.submit()">
                        <option>Select records</option>
                        <option value="3">3 records per page</option>
                        <option value="5">5 records per page</option>
                        <option value="10">10 records per page</option>
                    </select>
                    <input type="hidden" name="page" value="1" />
                </form>
            }

        }
        else
        {
            <form method="get" asp-controller="Product" asp-action="@ViewData["CurrentAction"]" class="d-inline">
                <select name="pageSize" class="form-select form-select-sm w-auto d-inline-block" onchange="this.form.submit()">
                    <option>Select records</option>
                    <option value="3">3 records per page</option>
                    <option value="5">5 records per page</option>
                    <option value="10">10 records per page</option>
                </select>
                <input type="hidden" name="page" value="1" />
            </form>
        }
        <nav aria-label="Page navigation example" class="d-inline-block">
            <ul class="pagination pagination-sm mb-0">
                <li class="page-item @(Model.pageNumber == 1 ? "disabled" : "")">
                    @if (ViewData["Parameters"] != null)
                    {
                        @if (ViewData["Parameters"] is Dictionary<string, object> routeParams)
                        {
                            <form asp-controller="Product" asp-action="@ViewData["CurrentAction"]" asp-route-page="@(Model.pageNumber - 1)" asp-route-pageSize="@(ViewContext.HttpContext.Request.Query["pageSize"])">
                                @foreach (var param in routeParams)
                                {
                                    <input name="@param.Key" value="@param.Value" style="display:none" />
                                }
                                <input type="hidden" name="pageSize" value="@(ViewContext.HttpContext.Request.Query["pageSize"])" />
                                <button type="submit" class="page-link">
                                    Previous
                                </button>
                            </form>
                        }
                        else
                        {
                            <form asp-controller="Product" asp-action="@ViewData["CurrentAction"]" asp-route-page="@(Model.pageNumber - 1)" asp-route-pageSize="@(ViewContext.HttpContext.Request.Query["pageSize"])">
                                <input name="@ViewData["NamePara"]" value="@ViewData["Parameters"]" style="display:none" />
                                <input type="hidden" name="pageSize" value="@(ViewContext.HttpContext.Request.Query["pageSize"])" />
                                <button type="submit" class="page-link">
                                    Previous
                                </button>
                            </form>
                        }
                    }
                    else
                    {
                        <form asp-controller="Product" asp-action="@ViewData["CurrentAction"]" asp-route-page="@(Model.pageNumber - 1)" asp-route-pageSize="@(ViewContext.HttpContext.Request.Query["pageSize"])">
                            <input type="hidden" name="pageSize" value="@(ViewContext.HttpContext.Request.Query["pageSize"])" />
                            <button type="submit" class="page-link">
                                Previous
                            </button>
                        </form>
                    }
                </li>
                @for (var pg = 1; pg <= Model.pageCount; pg++)
                {
                    <li class="page-item @(pg == Model.pageNumber ? "active" : "")">

                        @if (ViewData["Parameters"] != null)
                        {
                            @if (ViewData["Parameters"] is Dictionary<string, object> routeParams)
                            {
                                <form asp-controller="Product" asp-action="@ViewData["CurrentAction"]" asp-route-page="@pg" asp-route-pageSize="@(ViewContext.HttpContext.Request.Query["pageSize"])">
                                    @foreach (var param in routeParams)
                                    {
                                        <input name="@param.Key" value="@param.Value" style="display:none" />
                                    }
                                    <input type="hidden" name="pageSize" value="@(ViewContext.HttpContext.Request.Query["pageSize"])" />
                                    <button type="submit" class="page-link">
                                        @pg
                                    </button>
                                </form>
                            }
                            else
                            {
                                <form asp-controller="Product" asp-action="@ViewData["CurrentAction"]" asp-route-page="@pg" asp-route-pageSize="@(ViewContext.HttpContext.Request.Query["pageSize"])">
                                    <input name="@ViewData["NamePara"]" value="@ViewData["Parameters"]" style="display:none" />
                                    <input type="hidden" name="pageSize" value="@(ViewContext.HttpContext.Request.Query["pageSize"])" />
                                    <button type="submit" class="page-link">
                                        @pg
                                    </button>
                                </form>
                            }
                        }
                        else
                        {
                            <form asp-controller="Product" asp-action="@ViewData["CurrentAction"]" asp-route-page="@pg" asp-route-pageSize="@(ViewContext.HttpContext.Request.Query["pageSize"])">
                                <input type="hidden" name="pageSize" value="@(ViewContext.HttpContext.Request.Query["pageSize"])" />
                                <button type="submit" class="page-link">
                                    @pg
                                </button>
                            </form>
                        }
                    </li>
                }
                <li class="page-item @(Model.pageNumber == Model.pageCount ? "disabled" : "")">

                    @if (ViewData["Parameters"] != null)
                    {
                        @if (ViewData["Parameters"] is Dictionary<string, object> routeParams)
                        {
                            <form asp-controller="Product" asp-action="@ViewData["CurrentAction"]" asp-route-page="@(Model.pageNumber + 1)" asp-route-pageSize="@(ViewContext.HttpContext.Request.Query["pageSize"])">
                                @foreach (var param in routeParams)
                                {
                                    <input name="@param.Key" value="@param.Value" style="display:none" />
                                }
                                <input type="hidden" name="pageSize" value="@(ViewContext.HttpContext.Request.Query["pageSize"])" />
                                <button type="submit" class="page-link">
                                    Next
                                </button>
                            </form>
                        }
                        else
                        {
                            <form asp-controller="Product" asp-action="@ViewData["CurrentAction"]" asp-route-page="@(Model.pageNumber + 1)" asp-route-pageSize="@(ViewContext.HttpContext.Request.Query["pageSize"])">
                                <input name="@ViewData["NamePara"]" value="@ViewData["Parameters"]" style="display:none" />
                                <input type="hidden" name="pageSize" value="@(ViewContext.HttpContext.Request.Query["pageSize"])" />
                                <button type="submit" class="page-link">
                                    Next
                                </button>
                            </form>
                        }

                    }
                    else
                    {
                        <form asp-controller="Product" asp-action="@ViewData["CurrentAction"]" asp-route-page="@(Model.pageNumber + 1)" asp-route-pageSize="@(ViewContext.HttpContext.Request.Query["pageSize"])">
                            <input type="hidden" name="pageSize" value="@(ViewContext.HttpContext.Request.Query["pageSize"])" />
                            <button type="submit" class="page-link">
                                Next
                            </button>
                        </form>
                    }
                </li>
            </ul>
        </nav>
    </div>
</div>


@* Thông báo lỗi nhập giá dưới 0 *@
<script>
    // Hàm kiểm tra và hiển thị lỗi
    function validatePriceInput(inputElement, errorElement) {
        if (inputElement.value < 0) {
            errorElement.classList.remove('d-none');
            return false; // Có lỗi
        } else {
            errorElement.classList.add('d-none');
            return true; // Không có lỗi
        }
    }

    // Hàm kiểm tra giá trị minRange và maxRange
    function validateRange() {
        const minRangeValue = parseFloat(minRangeInput.value) || 0;
        const maxRangeValue = parseFloat(maxRangeInput.value) || 0;

        if (maxRangeValue <= minRangeValue && maxRangeInput.value && minRangeInput.value) {
            rangeError.classList.remove('d-none'); // Hiển thị lỗi
            return false; // Có lỗi
        } else {
            rangeError.classList.add('d-none'); // Ẩn lỗi
            return true; // Không có lỗi
        }
    }

    // Hàm tổng hợp để kiểm tra tất cả các lỗi
    function validateAll() {
        const isMinPriceValid = validatePriceInput(minRangeInput, minPriceError);
        const isMaxPriceValid = validatePriceInput(maxRangeInput, maxPriceError);
        const isRangeValid = validateRange();

        // Trả về true nếu tất cả các kiểm tra hợp lệ
        return isMinPriceValid && isMaxPriceValid && isRangeValid;
    }

    // Lấy các phần tử input và các phần tử thông báo lỗi
    const minRangeInput = document.getElementById('minRange');
    const maxRangeInput = document.getElementById('maxRange');
    const minPriceError = document.getElementById('minPriceError');
    const maxPriceError = document.getElementById('maxPriceError');
    const rangeError = document.getElementById('rangeError');
    const submitButton = document.querySelector('button[type="submit"]');

    // Thêm sự kiện khi nhập giá trị
    minRangeInput.addEventListener('input', function () {
        validatePriceInput(minRangeInput, minPriceError);
        validateRange();
        submitButton.disabled = !validateAll();
    });

    maxRangeInput.addEventListener('input', function () {
        validatePriceInput(maxRangeInput, maxPriceError);
        validateRange();
        submitButton.disabled = !validateAll();
    });

    // Ngăn form submit nếu có lỗi
    document.getElementById('filterForm').addEventListener('submit', function (event) {
        if (!validateAll()) {
            event.preventDefault(); // Ngăn form submit
        }
    });

    // Khởi tạo trạng thái ban đầu của nút submit
    submitButton.disabled = !validateAll();
</script>

<script>
    function addToWishList(productId, productName, productPrice, productImage) {
        // Cập nhật các giá trị input ẩn với thông tin của sản phẩm hiện tại
        document.getElementById('ProductId').value = productId;
        document.getElementById('ProductName').value = productName;
        document.getElementById('ProductPrice').value = productPrice;
        document.getElementById('ProductImage').value = productImage;

        // Tạo FormData và gửi request
        const formData = new FormData(document.getElementById('wishlistForm'));

        fetch('@Url.Action("AddWishList", "Admin")', {
            method: 'POST',
            body: formData
        })
            .then(response => response.json())
            .then(response => {
                if (response.success) {
                    toastr.success(response.message || 'Thêm vào WishList  đã thành công!')
                } else {
                    toastr.error(response.message || 'Đã xảy ra lỗi không xác định.');
                    document.getElementById('wishlistCheckbox').checked = false;
                }
            })
            .catch(error => {
                alert("Có lỗi xảy ra: " + error.message);
                document.getElementById('wishlistCheckbox').checked = false;
            });
    }
</script>


